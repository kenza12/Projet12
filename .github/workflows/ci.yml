name: CI

# Déclencheur du workflow: Déclenche le workflow à chaque push sur la branche main ou à chaque PR vers la branche main.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Définit les jobs à exécuter: build (nom du job)
jobs:
  build:
    runs-on: ubuntu-latest # Utilise Ubuntu pour exécuter le job

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.ADMIN_DB_PASSWORD }}
        ports:
          - '3306:3306'
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    # Définit les étapes du job
    steps:
      # Utilise l'action actions/checkout@v2 pour vérifier (cloner) le code du dépôt pour permettre aux étapes suivantes du workflow d'accéder au code source.
      - name: Checkout code
        uses: actions/checkout@v2

      # Utilise l'action actions/setup-python@v2 pour configurer Python. Elle permet de s'assurer que la version de Python requise est installée et disponible pour les étapes suivantes du workflow.
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'


      # Wait for MySQL to be ready
      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done

      # Configure MySQL root user
      - name: Configure MySQL
        run: |
          mysql -u root -p${{ secrets.ADMIN_DB_PASSWORD }} -h 127.0.0.1 -e "CREATE USER 'root'@'127.0.0.1' IDENTIFIED BY '${{ secrets.ADMIN_DB_PASSWORD }}';"
          mysql -u root -p${{ secrets.ADMIN_DB_PASSWORD }} -h 127.0.0.1 -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'127.0.0.1' WITH GRANT OPTION;"
          mysql -u root -p${{ secrets.ADMIN_DB_PASSWORD }} -h 127.0.0.1 -e "FLUSH PRIVILEGES;"
          mysql -u root -p${{ secrets.ADMIN_DB_PASSWORD }} -h 127.0.0.1 -e "status"

      # Install dependencies on Ubuntu
      - name: Install dependencies on Ubuntu
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install

      # Recrée le fichier .env à partir du contenu stocké dans le secret ENV_FILE.
      - name: Create .env file from secret
        run: |
          echo -e "${{ secrets.ENV_FILE }}" > .env
          cat .env

      # Afficher le help de l'application
      - name: Show help for application
        run: |
          pipenv run python epicevents/main.py --help

      # Exécute les tests sur Ubuntu
      - name: Run tests on Ubuntu
        run: |
          pipenv run pytest -v tests/

      # Générer le rapport de couverture
      - name: Run tests with coverage
        run: |
          pipenv install pytest-cov
          pipenv run pytest --cov=./epicevents --cov-report=xml:coverage.xml

      # Analyse SonarQube
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PYTHON_COVERAGE_REPORTS: coverage.xml
          SONAR_PROJECT_BASEDIR: .