name: CI

# Déclencheur du workflow: Déclenche le workflow à chaque push sur la branche main ou à chaque PR vers la branche main. 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Définit les jobs à exécuter: build (nom du job)
jobs:
  build:
    runs-on: ${{ matrix.os }} # Utilise la matrice pour exécuter le job sur différents systèmes d'exploitation.

    # Définit une matrice de jobs.
    strategy:
      #  Spécifie les combinaisons d'OS et de versions de Python.
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11']

    # Définit les étapes du job
    steps:
      # Utilise l'action actions/checkout@v2 pour vérifier(cloner) le code du dépôt pour permettre aux étapes suivants du workflow d'accéder au code source.
      - name: Checkout code
        uses: actions/checkout@v2

      #Utilise l'action actions/setup-python@v2 pour configurer Python. Elle permet de s'assurer que la version de Python requise est installée et disponible pour les étapes suivantes du workflow.
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and start MySQL on Ubuntu
        if: runner.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo /etc/init.d/mysql start
          sudo mysql -e "ALTER USER 'root'@'127.0.0.1' IDENTIFIED WITH 'mysql_native_password' BY '${{ secrets.ADMIN_DB_PASSWORD }}';"
          sudo mysql -e "FLUSH PRIVILEGES;"
          sudo mysql -u root -p${{ secrets.ADMIN_DB_PASSWORD }} -e "status"

      - name: Install and start MySQL on macOS
        if: runner.os == 'macos-latest'
        run: |
          brew update
          brew install mysql
          brew services start mysql
          mysql -u root -e "ALTER USER 'root'@'127.0.0.1' IDENTIFIED WITH 'mysql_native_password' BY '${{ secrets.ADMIN_DB_PASSWORD }}';"
          mysql -u root -e "FLUSH PRIVILEGES;"
          mysql -u root -p${{ secrets.ADMIN_DB_PASSWORD }} -e "status"

      - name: Install and start MySQL on Windows
        if: runner.os == 'windows-latest'
        run: |
          choco install mysql
          Start-Service mysql
          mysql -u root -e "ALTER USER 'root'@'127.0.0.1' IDENTIFIED WITH 'mysql_native_password' BY '${{ secrets.ADMIN_DB_PASSWORD }}';"
          mysql -u root -e "FLUSH PRIVILEGES;"
          mysql -u root -p${{ secrets.ADMIN_DB_PASSWORD }} -e "status"

      - name: Check environment variable
        run: echo "DB_PASSWORD is ${{ secrets.ADMIN_DB_PASSWORD }}"

      - name: Install dependencies on Ubuntu and macOS
        if: runner.os != 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install

      - name: Install dependencies on Windows
        if: runner.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install

      - name: Create .env file from secret
        run: |
          echo -e "${{ secrets.ENV_FILE }}" > .env
          cat .env

      - name: Show help for application
        run: |
          pipenv run python epicevents/main.py --help

      - name: Run tests on Ubuntu and macOS
        if: runner.os != 'windows-latest'
        run: |
          pipenv run pytest -v tests/

      - name: Run tests on Windows
        if: runner.os == 'windows-latest'
        run: |
          pipenv run pytest -v tests/
